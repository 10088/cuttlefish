%% Default Bucket Properties

%% @doc the number of replicas stored. Note: See CAP Controls for further discussion.
%% http://docs.basho.com/riak/latest/dev/advanced/cap-controls/
{mapping, "n_val", "n_val", [
  {datatype, integer},
  {level, advanced}
]}.

{mapping, "pr", "pr", [
  {level, advanced}
]}.

%% Cut and paste translation screams to be rewritten as a datatype, but that's a 
%% "nice to have"
{translation,
  "pr",
  fun(Conf) ->
    Setting = cuttlefish_util:conf_get_value("pr", Conf),
    case Setting of
      "quorum" -> quorum;
      "all" -> all;
      X ->
        try list_to_integer(Setting) of
          Int -> Int
        catch
          E:R -> error
        end
    end
  end
}.

{mapping, "r", "r", [
  {level, advanced}
]}.
{translation,
  "r",
  fun(Conf) ->
    Setting = cuttlefish_util:conf_get_value("r", Conf),
    case Setting of
      "quorum" -> quorum;
      "all" -> all;
      X ->
        try list_to_integer(Setting) of
          Int -> Int
        catch
          E:R -> error
        end
    end
  end
}.

{mapping, "w", "w", [
  {level, advanced}
]}.
{translation,
  "w",
  fun(Conf) ->
    Setting = cuttlefish_util:conf_get_value("w", Conf),
    case Setting of
      "quorum" -> quorum;
      "all" -> all;
      X ->
        try list_to_integer(Setting) of
          Int -> Int
        catch
          E:R -> error
        end
    end
  end
}.

{mapping, "pw", "pw", [
  {level, advanced}
]}.
{translation,
  "pw",
  fun(Conf) ->
    Setting = cuttlefish_util:conf_get_value("pw", Conf),
    case Setting of
      "quorum" -> quorum;
      "all" -> all;
      X ->
        try list_to_integer(Setting) of
          Int -> Int
        catch
          E:R -> error
        end
    end
  end
}.

{mapping, "dw", "dw", [
  {level, advanced}
]}.
{translation,
  "dw",
  fun(Conf) ->
    Setting = cuttlefish_util:conf_get_value("dw", Conf),
    case Setting of
      "quorum" -> quorum;
      "all" -> all;
      X ->
        try list_to_integer(Setting) of
          Int -> Int
        catch
          E:R -> error
        end
    end
  end
}.

{mapping, "rw", "rw", [
  {level, advanced}
]}.
{translation,
  "rw",
  fun(Conf) ->
    Setting = cuttlefish_util:conf_get_value("buckets.default.rw", Conf),
    case Setting of
      "quorum" -> quorum;
      "all" -> all;
      X ->
        try list_to_integer(Setting) of
          Int -> Int
        catch
          E:R -> error
        end
    end
  end
}.

%% @doc whether or not siblings are allowed.
%% Note: See Vector Clocks for a discussion of sibling resolution.
{mapping, "siblings", "allow_mult", [
  {datatype, {enum, [on, off]}},
  {level, advanced}
]}.

{translation,
 "allow_mult",
 fun(Conf) ->
  Setting = cuttlefish_util:conf_get_value("buckets.default.siblings", Conf),
    case Setting of
      on -> true;
      off -> false;
      _Default -> true
    end
 end}.

{mapping, "last_write_wins", "last_write_wins", [
  {datatype, {enum, [true, false]}},
  {level, advanced}
]}.
%{mapping, "buckets.default.precommit", "riak_core.default_bucket_props.precommit", []},
%{mapping, "buckets.default.postcommit", "riak_core.default_bucket_props.postcommit", []},
%{mapping, "buckets.default.chash_keyfun", "riak_core.default_bucket_props.chash_keyfun", {riak_core_util, chash_std_keyfun}},
%{mapping, "buckets.default.linkfun", "riak_core.default_bucket_props.linkfun", {modfun, riak_kv_wm_link_walker, mapreduce_linkfun}}
