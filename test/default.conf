#jd# Hi! Welcome to my draft of the riak.conf file! 
#jd# Comments with ## will be included in the default file
#jd# Comments with #jd# are notes to keep in mind while reading it
#jd#   Metacomments? lol ETOODEEP






## pb_backlog is the maximum length to which the queue of pending
## connections may grow. If set, it must be an integer >= 0.
## By default the value is 5. If you anticipate a huge number of
## connections being initialised *simultaneously*, set this number
## higher.
#jd# this is an example of a setting that is included in the .conf 
#jd# file, but intitially commented out. Note that the "sample" 
#jd# value is *NOT* the actual default
## protobuf.backlog = 64

## pb is a list of IP addresses and TCP ports that the Riak 
## Protocol Buffers interface will bind.
#jd# I'm uncertain about how I'd like to handles lists of things
protobuf.ip[0] = 127.0.0.1:8087

## Default location of ringstate
#jd# we need to think about this setting. Is it here because
#jd# a) it makes packaging easier for Jared
#jd# b) it shows the user how to change it
#jd# c) bolth
ring_dir = ./data/ring

## Default ring creation size.  Make sure it is a power of 2,
## e.g. 16, 32, 64, 128, 256, 512 etc
#jd# this one is commented out, but also the default.
#jd# why comment it at all then?
## ring_size = 64

## http is a list of IP addresses and TCP ports that the Riak
## HTTP interface will bind.
#jd# again, list syntax
http.ip[0] = 127.0.0.1:8098

## https is a list of IP addresses and TCP ports that the Riak
## HTTPS interface will bind.
#jd# again, list syntax. Is it odd that http and https default
#jd# to the same port?
## https.ip[0] = 127.0.0.1:8098

## Default cert and key locations for https can be overridden
## with the ssl config variable, for example:
## ssl.certfile = ./etc/cert.pem
## ssl.keyfile = ./etc/key.pem

## riak_handoff_port is the TCP port that Riak uses for
## intra-cluster data handoff.
handoff.port = 8099

## To encrypt riak_core intra-cluster data handoff traffic,
## uncomment the following line and edit its path to an
## appropriate certfile and keyfile.  (This example uses a
## single file with both items concatenated together.)
# handoff.ssl.certfile = /tmp/erlserver.pem

## DTrace support
## Do not enable 'dtrace_support' unless your Erlang/OTP
## runtime is compiled to support DTrace.  DTrace is
## available in R15B01 (supported by the Erlang/OTP
## official source package) and in R14B04 via a custom
## source repository & branch.
dtrace = false

## Platform-specific installation paths (substituted by rebar)
platform_bin_dir  = ./bin
platform_data_dir = ./data
platform_etc_dir  = ./etc
platform_lib_dir  = ./lib
platform_log_dir  = ./log

## Storage_backend specifies the Erlang module defining the storage
## mechanism that will be used on this node.
storage_backend = bitcask

## raw_name is the first part of all URLS used by the Riak raw HTTP
## interface.  See riak_web.erl and raw_http_resource.erl for
## details.
## raw_name = riak

## Enable active anti-entropy subsystem + optional debug messages:
##   {anti_entropy, {on|off, []}},
##   {anti_entropy, {on|off, [debug]}},
anti_entropy = on

## Restrict how fast AAE can build hash trees. Building the tree
## for a given partition requires a full scan over that partition's
## data. Once built, trees stay built until they are expired.
## Config is of the form:
##   {num-builds, per-timespan-in-milliseconds}
## Default is 1 build per hour.
anti_entropy.build_limit.num_builds = 1
anti_entropy.build_limit.per_milliseconds = 3600000

## Determine how often hash trees are expired after being built.
## Periodically expiring a hash tree ensures the on-disk hash tree
## data stays consistent with the actual k/v backend data. It also
## helps Riak identify silent disk failures and bit rot. However,
## expiration is not needed for normal AAE operation and should be
## infrequent for performance reasons. The time is specified in
## milliseconds. The default is 1 week.
anti_entropy.expire = 604800000

## Limit how many AAE exchanges/builds can happen concurrently.
anti_entropy.concurrency = 2

## The tick determines how often the AAE manager looks for work
## to do (building/expiring trees, triggering exchanges, etc).
## The default is every 15 seconds. Lowering this value will
## speedup the rate that all replicas are synced across the cluster.
## Increasing the value is not recommended.
anti_entropy.tick = 15000

## The directory where AAE hash trees are stored.
anti_entropy.data_dir = ./data/anti_entropy

## The LevelDB options used by AAE to generate the LevelDB-backed
## on-disk hashtrees.
anti_entropy.leveldb.write_buffer_size = 4194304
anti_entropy.leveldb.max_open_files = 20

## mapred_name is URL used to submit map/reduce requests to Riak.
mapred_name = mapred

## mapred_2i_pipe indicates whether secondary-index
## MapReduce inputs are queued in parallel via their own
## pipe ('true'), or serially via a helper process
## ('false' or undefined).  Set to 'false' or leave
## undefined during a rolling upgrade from 1.0.
mapred_2i_pipe = true

## Each of the following entries control how many Javascript
## virtual machines are available for executing map, reduce,
## pre- and post-commit hook functions.
javascript_vm_count.map = 8
javascript_vm_count.reduce = 6
javascript_vm_count.hook = 2

## js_max_vm_mem is the maximum amount of memory, in megabytes,
## allocated to the Javascript VMs. If unset, the default is
## 8MB.
javascript_vm.max_mem = 8

## js_thread_stack is the maximum amount of thread stack, in megabyes,
## allocate to the Javascript VMs. If unset, the default is 16MB.
## NOTE: This is not the same as the C thread stack.
javascript_vm.thread_stack = 16

## js_source_dir should point to a directory containing Javascript
## source files which will be loaded by Riak when it initializes
## Javascript VMs.
javascript_vm.source_dir = /tmp/js_source

## http_url_encoding determines how Riak treats URL encoded
## buckets, keys, and links over the REST API. When set to 'on'
## Riak always decodes encoded values sent as URLs and Headers.
## Otherwise, Riak defaults to compatibility mode where links
## are decoded, but buckets and keys are not. The compatibility
## mode will be removed in a future release.
http.url_encoding = on

## Switch to vnode-based vclocks rather than client ids.  This
## significantly reduces the number of vclock entries.
## Only set true if *all* nodes in the cluster are upgraded to 1.0
vnode_vclocks = true

## This option toggles compatibility of keylisting with 1.0
## and earlier versions.  Once a rolling upgrade to a version
## > 1.0 is completed for a cluster, this should be set to
## true for better control of memory usage during key listing
## operations
listkeys_backpressure = true

## This option specifies how many of each type of fsm may exist
## concurrently.  This is for overload protection and is a new
## mechanism that obsoletes 1.3's health checks. Note that this number
## represents two potential processes, so +P in vm.args should be at 
## least 3X the fsm_limit.
fsm_limit = 50000

## object_format controls which binary representation of a riak_object 
## is stored on disk.
## Current options are: v0, v1.
## v0: Original erlang:term_to_binary format. Higher space overhead.
## v1: New format for more compact storage of small values.
object_format = v1

## Riak Search Config
riak_search = disabled

## Merge Index Config
#The root dir to store search merge_index data
merge_index.data_root = ./data/merge_index

## Size, in bytes, of the in-memory buffer.  When this
## threshold has been reached the data is transformed
## into a segment file which resides on disk.
merge_index.buffer_rollover_size = 1048576

## Overtime the segment files need to be compacted.
## This is the maximum number of segments that will be
## compacted at once.  A lower value will lead to
## quicker but more frequent compactions.
merge_index.max_compact_segments = 20

## Configure how Bitcask writes data to disk.
##   erlang: Erlang's built-in file API
##      nif: Direct calls to the POSIX C API
##
## The NIF mode provides higher throughput for certain
## workloads, but has the potential to negatively impact
## the Erlang VM, leading to higher worst-case latencies
## and possible throughput collapse.
bitcask.io_mode = erlang

bistcask.data_root = ./data/bitcask

## eLevelDB Config
eleveldb.data_root = ./data/leveldb

## log.syslog = on
log.error.file = /var/log/error.log
log.console.file = /var/log/console.log

## Whether to write a crash log, and where.
## Commented/omitted/undefined means no crash logger.
log.crash.file = ./log/crash.log

## Maximum size in bytes of events in the crash log - defaults to 65536
log.crash.msg_size = 65536

## Maximum size of the crash log in bytes, before its rotated, set
## to 0 to disable rotation - default is 0
log.crash.size = 10485760

## What time to rotate the crash log - default is no time
## rotation. See the lager README for a description of this format:
## https://github.com/basho/lager/blob/master/README.org
log.crash.date = $D0

## Number of rotated crash logs to keep, 0 means keep only the
## current one - default is 0
log.crash.count = 5

## Whether to redirect error_logger messages into lager - defaults to true
log.error_logger_redirect = true

## maximum number of error_logger messages to handle in a second
## lager 2.0.0 shipped with a limit of 50, which is a little low for riak's startup
log.error_logger_hwm = 100

## riak_sysmon will not be included in this file, but if you wanted to configure it from here, 
## it would look a little something like this... hit it!

## To disable forwarding events of a particular type, use a
## limit of 0. 
riak.sysmon.process_limit = 30
riak.sysmon.port_limit = 2

## Finding reasonable limits for a given workload is a matter
## of experimentation.
## NOTE: Enabling the 'gc_ms_limit' monitor (by setting non-zero)
##       can cause performance problems on multi-CPU systems.
riak.sysmon.gc_ms_limit = 0
riak.sysmon.heap_word_limit = 40111000

## Configure the following items to 'false' to disable logging
## of that event type.
riak.sysmon.busy_port = true
riak.sysmon.busy_dist_port = true


## SASL config
#jd# it's always off 'cause lager should handle this. we'll hide it.
sasl = off

## riak_control 
riak_control = disabled
riak_control.auth = userlist
#jd# this is like a proplist with the key as a subset of the
#jd# conf key, (e.g. 'user' and 'joe')
riak_control.user.user.password = pass
riak_control.user.joe.password = 12345

#jd# this should always be on, so why expose it? we're not going it!
riak_control.admin = true

## should riak_control user/pass be in a different file?
